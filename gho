#!/usr/bin/perl -w

use strict;
use warnings;
use v5.10;
use utf8;

my %apps = (
    api => {
        build => {
            run => sub {
                run(qw( ansible-playbook -i hosts.yaml api/build.yml )),
            },
        },
        deploy => {
            run => sub {
                run(qw( ansible-playbook -i hosts.yaml api/deploy.yml )),
            },
        },
        restart => {
            run => sub {
                run(qw( ansible-playbook -i hosts.yaml api/restart.yml )),
            },
        },
    },
    secrets => {
        edit => {
            run => sub {
                # Password stored in 1Password as “PGXN Manager Secrets”
                run(qw(ansible-vault edit manager/secrets.yml))
            }
        }
    },

    manager => {
        build => {
            run => sub {
                # Password stored in 1Password as “PGXN Manager Secrets”
                run(qw(
                    ansible-playbook -i hosts.yaml manager/build.yml -e @manager/secrets.yml --ask-vault-pass
                ))
            },
        },
        deploy => {
            run => sub {
                # Password stored in 1Password as “PGXN Manager Secrets”
                run(qw(
                    ansible-playbook -i hosts.yaml manager/deploy.yml -e @manager/secrets.yml --ask-vault-pass
                ))
            },
        },
        restart => {
            run => sub {
                run(qw( ansible-playbook -i hosts.yaml manager/restart.yml )),
            },
        },
    },
    site => {
        build => {
            run => sub {
                run(qw( ansible-playbook -i hosts.yaml site/build.yml )),
            },
        },
        deploy => {
            run => sub {
                run(qw( ansible-playbook -i hosts.yaml site/deploy.yml )),
            },
        },
        restart => {
            run => sub {
                run(qw( ansible-playbook -i hosts.yaml site/restart.yml )),
            },
        },
    },);

sub run {
    system(@_) == 0 or exit $? >> 8;
}

sub usage {
    say STDERR @_ if @_;
    say "Usage: gho ACTION APP";
    say "Run gho --help for a complete list of actions and apps."
}

sub bail {
    usage(@_);
    exit 1;
}

sub help {
    usage();
    say "\nActions & Commands";
    my %seen;
    for my $cmd (grep { !$seen{$_}++ } sort map { keys %{ $_ } } values %apps) {
        say "*   $cmd";
        say "    -   $_" for grep { $apps{$_}->{$cmd} } sort keys %apps;
    }
    exit;
}

my ($cmd_name, $app_name) = @ARGV;
help() if $cmd_name && $cmd_name =~ /^-{0,2}help$/;

bail() unless $cmd_name && $app_name;

my $app = $apps{$app_name} or bail("Unknown app “$app_name”");
my $cmd = $app->{$cmd_name} or bail("Unknown $app_name command “$cmd_name”");

$cmd->{run}();
